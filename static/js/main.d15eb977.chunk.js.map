{"version":3,"sources":["utils.js","components/AppContainer.js","GlobalStyle.js","components/Country.js","components/OptionsContainer.js","components/Option.js","components/Modal.js","components/Timer.js","components/Score.js","components/CorrectIcon.js","components/WrongIcon.js","App.js","countries.js","index.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","styled","div","createGlobalStyle","props","isTimerOpen","css","Container","styles","width","height","Country","code","svg","styleProps","Option","children","React","Children","count","toArray","up","ceil","firstRow","slice","secondRow","Button","span","borderColor","name","onClick","icon","Score","currentScore","onFinish","useState","counter","setCounter","useEffect","timer","setTimeout","clearTimeout","round","maxScore","Check","Cross","countries","NUM_OPTIONS","MAX_SCORE","isCountryInList","list","country","i","countryObj","getRandomCountry","excludeList","getCountriesArray","currentCountry","correct","console","log","map","e","push","App","setCurrentIndex","setCurrentCountry","hasFinished","setHasFinished","options","setOptions","shouldUpdateUI","setShouldUpdateUI","setIsTimerOpen","setCurrentScore","GlobalStyle","Modal","AppContainer","option","key","CorrectIcon","WrongIcon","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d15eb977.chunk.js","sourcesContent":["export function shuffle (array) {\n  let currentIndex = array.length\n\n  let temporaryValue\n\n  let randomIndex\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n\n  return array\n}\n","import styled from 'styled-components'\n\nexport default styled.div`\n  position: absolute;\n  top: 30%;\n  left: 50%;\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  width: 80%;\n`\n","import { createGlobalStyle, css } from 'styled-components'\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  body {\n    font-family: 'Lato', sans-serif;\n    font-size: 16px;\n    background: #dfe6e9;\n    ${props =>\n    props.isTimerOpen &&\n      css`\n        background: #bdc3c7;\n      `}\n  }\n`\n","import React from 'react'\nimport ReactCountryFlag from 'react-country-flag'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst styles = {\n  width: '180px',\n  height: '180px'\n}\n\nexport default function Country ({ code }) {\n  return (\n    <Container>\n      <ReactCountryFlag code={code} svg styleProps={styles} />\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 16px;\n`\n\nexport default function Option ({ children }) {\n  const length = React.Children.count(children)\n\n  const array = React.Children.toArray(children)\n  const up = Math.ceil(length / 2)\n\n  const firstRow = array.slice(0, up)\n  const secondRow = array.slice(up, length)\n  return (\n    <>\n      <Container>{firstRow}</Container>\n      <Container>{secondRow}</Container>\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.span`\n  display: flex;\n  justify-content: space-between;\n  width: 250px;\n  height: 60px;\n  padding: 16px;\n  border: 1px solid\n    ${props => (props.borderColor ? props.borderColor : '#95a5a6')};\n  cursor: pointer;\n\n  &:hover {\n    font-weight: bold;\n    border: 1px solid\n      ${props => (props.borderColor ? props.borderColor : 'black')};\n  }\n\n  margin: 0 12px;\n`\n\nexport default function Option ({ name, onClick, icon, borderColor }) {\n  return (\n    <Button onClick={onClick} borderColor={borderColor}>\n      <span>{name}</span>\n      <span>{icon}</span>\n    </Button>\n  )\n}\n","import styled from 'styled-components'\n\nexport default styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  background: #ecf0f1;\n  width: 280px;\n  height: 180px;\n  z-index: 99;\n  font-size: 24px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  position: absolute;\n  top: 70%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 24px;\n`\nexport default function Score ({ currentScore, onFinish }) {\n  const [counter, setCounter] = useState(3)\n\n  useEffect(() => {\n    let timer\n    if (counter > 0) {\n      timer = setTimeout(() => setCounter(counter - 1), 1000)\n    } else {\n      onFinish()\n    }\n    return () => {\n      if (timer) {\n        clearTimeout(timer)\n      }\n    }\n  })\n\n  return (\n    <Container>\n      <span>{counter}</span>\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  position: absolute;\n  bottom: 0px;\n  right: 10px;\n  font-size: 24px;\n`\n\nexport default function Score ({ round, currentScore, maxScore }) {\n  return (\n    <Container>\n      Rodada: {round}\n      <br />\n      Score: {currentScore} / {maxScore}\n    </Container>\n  )\n}\n","import styled from 'styled-components'\nimport { Check } from 'styled-icons/boxicons-regular/Check'\n\nexport default styled(Check)`\n  color: green;\n  width: 32px;\n  height: 32px;\n  position: relative;\n  top: -6px;\n`\n","import styled from 'styled-components'\nimport { Cross } from 'styled-icons/icomoon/Cross'\n\nexport default styled(Cross)`\n  color: red;\n  width: 32px;\n  height: 32px;\n  position: relative;\n  top: -6px;\n`\n","import React, { useState, useEffect } from 'react'\n\nimport { shuffle } from './utils'\n\nimport AppContainer from './components/AppContainer'\nimport GlobalStyle from './GlobalStyle'\n\nimport Country from './components/Country'\nimport OptionsContainer from './components/OptionsContainer'\nimport Option from './components/Option'\n\nimport Modal from './components/Modal'\n\nimport Timer from './components/Timer'\nimport Score from './components/Score'\n\nimport CorrectIcon from './components/CorrectIcon'\nimport WrongIcon from './components/WrongIcon'\n\nimport orderedCountries from './countries'\n\nconst countries = shuffle(orderedCountries)\n\nconst NUM_OPTIONS = 10\nconst MAX_SCORE = countries.length\n\nfunction isCountryInList (list, country) {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].countryObj.code === country.code) return true\n  }\n  return false\n}\n\nfunction getRandomCountry (excludeList = []) {\n  let country = countries[Math.floor(Math.random() * countries.length)]\n  while (isCountryInList(excludeList, country)) {\n    country = countries[Math.floor(Math.random() * countries.length)]\n  }\n  return country\n}\n\nfunction getCountriesArray (currentCountry) {\n  let array = [{ countryObj: currentCountry, correct: true }]\n  for (let i = 0; i < NUM_OPTIONS - 1; i++) {\n    console.log('array is ' + array.map(e => e.countryObj.code))\n    array.push({\n      countryObj: getRandomCountry(array),\n      correct: false\n    })\n  }\n  return array\n}\n\nfunction App () {\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [currentCountry, setCurrentCountry] = useState(countries[currentIndex])\n  const [hasFinished, setHasFinished] = useState(false)\n\n  const [options, setOptions] = useState(\n    shuffle(getCountriesArray(currentCountry))\n  )\n\n  useEffect(\n    () => {\n      if (currentIndex === 15) {\n        setHasFinished(true)\n      } else {\n        setCurrentCountry(countries[currentIndex])\n      }\n    },\n    [currentIndex]\n  )\n\n  useEffect(\n    () => {\n      setOptions(shuffle(getCountriesArray(currentCountry)))\n    },\n    [currentCountry]\n  )\n\n  const [shouldUpdateUI, setShouldUpdateUI] = useState(false)\n  const [isTimerOpen, setIsTimerOpen] = useState(false)\n  const [currentScore, setCurrentScore] = useState(0)\n\n  // styled-icons/boxicons-regular/Check\n  function getOnClickHandlerFor (code) {\n    return () => {\n      if (code === currentCountry.code) setCurrentScore(currentScore + 1)\n      setShouldUpdateUI(true)\n      setTimeout(() => {\n        setIsTimerOpen(true)\n      }, 200)\n    }\n  }\n\n  function getWrongOptionBorderColor () {\n    if (shouldUpdateUI) return 'red'\n    return null\n  }\n\n  function getCorrectOptionBorderColor () {\n    if (shouldUpdateUI) return 'green'\n    return null\n  }\n\n  function getWrongOptionIcon () {\n    if (shouldUpdateUI) return <WrongIcon />\n    return null\n  }\n  function getCorrectOptionIcon () {\n    if (shouldUpdateUI) return <CorrectIcon />\n    return null\n  }\n\n  function goToNext () {\n    setShouldUpdateUI(false)\n    setCurrentIndex(currentIndex + 1)\n    // update options\n    //\n  }\n\n  function handleTimerFinish () {\n    setIsTimerOpen(false)\n    goToNext()\n  }\n\n  if (hasFinished) {\n    return (\n      <>\n        <GlobalStyle isTimerOpen={false} />\n        <Modal>\n          Finalizado\n          <br />({currentScore}/{MAX_SCORE})\n        </Modal>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isTimerOpen && <Timer onFinish={handleTimerFinish} />}\n      <GlobalStyle isTimerOpen={isTimerOpen} />\n      <AppContainer>\n        <Country code={currentCountry.code} />\n\n        <OptionsContainer>\n          {options.map(option => (\n            <Option\n              key={option.countryObj.code}\n              name={option.countryObj.name}\n              onClick={getOnClickHandlerFor(option.countryObj.code)}\n              borderColor={\n                option.correct\n                  ? getCorrectOptionBorderColor()\n                  : getWrongOptionBorderColor()\n              }\n              icon={\n                option.correct ? getCorrectOptionIcon() : getWrongOptionIcon()\n              }\n            />\n          ))}\n        </OptionsContainer>\n      </AppContainer>\n      <Score\n        round={currentIndex}\n        currentScore={currentScore}\n        maxScore={MAX_SCORE}\n      />\n    </>\n  )\n}\n\nexport default App\n\n/*\n <Option\n            name='Brasil'\n            onClick={getOnClickHandlerFor('br')}\n            borderColor={getWrongOptionBorderColor()}\n            icon={getWrongOptionIcon()}\n          />\n          <Option\n            name='Argentina'\n            onClick={getOnClickHandlerFor('ar')}\n            borderColor={getWrongOptionBorderColor()}\n            icon={getWrongOptionIcon()}\n          />\n          <Option\n            name='Austria'\n            onClick={getOnClickHandlerFor('at')}\n            borderColor={getWrongOptionBorderColor()}\n            icon={getWrongOptionIcon()}\n          />\n          <Option\n            name='Estados Unidos'\n            onClick={getOnClickHandlerFor('us')}\n            borderColor={getCorrectOptionBorderColor()}\n            icon={getCorrectOptionIcon()}\n          />\n*/\n","export default [\n  {\n    code: 'za',\n    name: 'Africa do sul'\n  },\n  {\n    code: 'na',\n    name: 'namibia'\n  },\n  {\n    code: 'eg',\n    name: 'Egito'\n  },\n  {\n    code: 'gr',\n    name: 'Grecia'\n  },\n  {\n    code: 'bg',\n    name: 'Bulgaria'\n  },\n  {\n    code: 'tr',\n    name: 'Turquia'\n  },\n  {\n    code: 'ro',\n    name: 'Romenia'\n  },\n  {\n    code: 'hu',\n    name: 'Hungria'\n  },\n  {\n    code: 'hr',\n    name: 'Croacia'\n  },\n  {\n    code: 'pt',\n    name: 'Portugal'\n  },\n  {\n    code: 'ie',\n    name: 'Irlanda'\n  },\n  {\n    code: 'in',\n    name: 'india'\n  },\n  {\n    code: 'id',\n    name: 'Indonesia'\n  },\n  {\n    code: 'mm',\n    name: 'Myanmar'\n  },\n  {\n    code: 'th',\n    name: 'Tailandia'\n  }\n]\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}